//--------------------------------------------------------- --Setup --------------------------------------------------------------------//
generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client-apollo"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("APOLLO_DB_URL")
}

//--------------------------------------------------------- Base Tables ------------------------------------------------------------//
model Show {
  showId      Int      @id @default(autoincrement()) @map("show_id")
  name        String   @db.VarChar(100)
  releaseYear Int
  summary     String?  @db.VarChar(480)
  length      Int?     @map("length")
  pgRating    String?  @map("pg_rating") @db.VarChar(20)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Imdb         Imdb?
  Movie        Movie?
  Series       Series?
  Image        Image[]
  Video        Video[]
  ShowCast     ShowCast[]
  ShowDirector ShowDirector[]
  ShowGenre    ShowGenre[]
  ShowLanguage ShowLanguage[]
  ShowStudio   ShowStudio[]
  ShowWriter   ShowWriter[]

  @@unique([name, releaseYear])
  @@map("show")
}

model Series {
  seriesId          Int      @id @default(autoincrement()) @map("series_id")
  show              Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId            Int      @map("show_id") @unique
  avgEpisodeLength  Int?     @map("avg_episode_length")
  type              String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  Episodes Episode[]
  @@map("series")
}

model Episode {
  episodeId   Int      @id @default(autoincrement()) @map("episode_id")
  series      Series     @relation(fields: [seriesId], references: [seriesId], onDelete: Cascade, onUpdate: Cascade)
  seriesId    Int      @map("series_id")
  season      Int
  number      Int
  name        String?  @db.VarChar(100)
  poster      String?  @db.VarChar(480)
  summary     String?  @db.VarChar(480)
  releaseDate String?     @map("release_date")
  length      Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt

  EpisodeServer  EpisodeServer[]

  @@unique([number, season, seriesId])
  @@map("episode")
}

model Movie {
  movieId   Int      @id @default(autoincrement()) @map("movie_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @unique @map("show_id")
  budget      Int?
  revenue     Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  MovieServer  MovieServer[]

  @@map("movie")
}


model Imdb {
  imdbId    String   @id @map("imdb_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @unique @map("show_id")
  rating    Float?
  voteCount Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("imdb")
}


model Server {
  serverId  Int      @id @default(autoincrement()) @map("server_id")
  name      String   @unique @db.VarChar(100)
  url       String   @unique @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  MovieServer  MovieServer[]
  EpisodeServer EpisodeServer[]

  @@map("server")
}

model Actor {
  actorId   Int      @id @default(autoincrement()) @map("actor_id")
  name      String   @db.VarChar(100)
  image     String?  @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  ShowCast ShowCast[]

  @@unique([name, image])
  @@map("actor")
}

model Director {
  directorId Int      @id @default(autoincrement()) @map("director_id")
  name       String   @db.VarChar(100)
  image      String?  @db.VarChar(480)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt

  ShowDirector ShowDirector[]

  @@unique([name, image])
  @@map("director")
}

model Genre {
  genreId   Int      @id @default(autoincrement()) @map("genre_id")
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ShowGenre   ShowGenre[]

  @@map("genre")
}

model Language {
  languageId Int      @id @default(autoincrement()) @map("language_id")
  name       String   @unique @db.VarChar(100)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  ShowLanguage ShowLanguage[]

  @@map("language")
}

model Studio {
  studioId  Int      @id @default(autoincrement()) @map("studio_id")
  name      String   @unique @db.VarChar(100)
  image     String?  @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ShowStudio ShowStudio[]

  @@map("studio")
}

model Writer {
  writerId  Int      @id @default(autoincrement()) @map("writer_id")
  name      String   @db.VarChar(100)
  image     String?   @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ShowWriter ShowWriter[]

  @@unique([name, image])
  @@map("writer")
}

// TODO Link langauges to the language entity
model Video {
  videoId Int      @id @default(autoincrement()) @map("video_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  name      String?
  url       String   @unique @db.VarChar(480)
  site      String?   @db.VarChar(480)
  quality   Int?
  type      String?
  official  Boolean?
  language  String?
  isDefault Boolean  @default(false) @map("default")
  publishedAt DateTime?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("video")
}

// TODO Link langauges to the language entity
model Image {
  imageId   Int      @id @default(autoincrement()) @map("image_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  url       String   @unique @db.VarChar(480)
  type      String?
  height    Int?
  width     Int?
  aspectRatio Float? @map("aspect_ratio")
  language  String?
  isDefault Boolean  @default(false) @map("default")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("image")
}

//----------------------------------------------------- Many To Many Tables ----------------------------------------------------//
model MovieServer {
  movie     Movie    @relation(fields: [movieId], references: [movieId], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int      @map("movie_id")
  server    Server   @relation(fields: [serverId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  serverId  Int      @map("server_id")
  url       String   @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([movieId, serverId])
  @@map("movie_server")
}

model EpisodeServer {
  episode   Episode  @relation(fields: [episodeId], references: [episodeId], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int      @map("episode_id")
  server    Server   @relation(fields: [serverId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  serverId  Int      @map("server_id")
  url       String   @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([serverId, episodeId])
  @@map("episode_server")
}

model ShowCast {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  actor     Actor    @relation(fields: [actorId], references: [actorId], onDelete: Cascade, onUpdate: Cascade)
  actorId   Int      @map("actor_id")
  role      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, actorId, role])
  @@map("show_cast")
}

model ShowDirector {
  show       Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId     Int      @map("show_id")
  director   Director @relation(fields: [directorId], references: [directorId], onDelete: Cascade, onUpdate: Cascade)
  directorId Int      @map("director_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([showId, directorId])
  @@map("show_director")
}

model ShowGenre {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  genre     Genre    @relation(fields: [genreId], references: [genreId], onDelete: Cascade, onUpdate: Cascade)
  genreId   Int      @map("genre_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, genreId])
  @@map("show_genre")
}

model ShowLanguage {
  show       Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId     Int      @map("show_id")
  language   Language @relation(fields: [languageId], references: [languageId], onDelete: Cascade, onUpdate: Cascade)
  languageId Int      @map("language_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([showId, languageId])
  @@map("show_language")
}

model ShowStudio {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  studio    Studio   @relation(fields: [studioId], references: [studioId], onDelete: Cascade, onUpdate: Cascade)
  studioId  Int      @map("studio_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, studioId])
  @@map("show_studio")
}

model ShowWriter {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  writer    Writer   @relation(fields: [writerId], references: [writerId], onDelete: Cascade, onUpdate: Cascade)
  writerId  Int      @map("writer_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, writerId])
  @@map("show_writer")
}
