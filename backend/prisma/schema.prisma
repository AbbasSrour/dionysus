//--------------------------------------------------------- --Setup --------------------------------------------------------------------//
generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://ares:7142@localhost:5432/optimized"
}

//--------------------------------------------------------- Base Tables ------------------------------------------------------------//
model Show {
  showId      Int      @id @default(autoincrement()) @map("show_id")
  name        String   @db.VarChar(100)
  releaseYear Int
  summary     String?  @db.VarChar(480)
  pgRating    String?  @map("pg_rating") @db.VarChar(50)
  budget      Int?
  revenue     Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Imdb         Imdb?
  Movie        Movie?
  Episode      Episode[]
  Poster       Poster[]
  Cover        Cover[]
  Trailer      Trailer[]
  ShowCast     ShowCast[]
  ShowDirector ShowDirector[]
  ShowGenre    ShowGenre[]
  ShowLanguage ShowLanguage[]
  ShowStudio   ShowStudio[]
  ShowWriter   ShowWriter[]
  ShowRating   ShowRating[]

  @@unique([name, releaseYear])
  @@map("show")
}

model Imdb {
  imdbId    String   @id @map("imdb_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @unique @map("show_id")
  rating    Float?
  voteCount Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("imdb")
}

model Movie {
  movieId   Int      @id @default(autoincrement()) @map("movie_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @unique @map("show_id")
  length    Int?     @map("movie_length")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  MovieServer  MovieServer[]
  MovieHistory MovieHistory[]

  @@map("movie")
}

model Episode {
  episodeId   Int      @id @default(autoincrement()) @map("episode_id")
  show        Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId      Int      @map("show_id")
  season      Int      @map("season")
  number      Int
  name        String?  @db.VarChar(100)
  poster      String?  @db.VarChar(480)
  summary     String?  @db.VarChar(480)
  releaseYear Int?     @map("release_year")
  length      Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt

  SeriesServer  SeriesServer[]
  SeriesHistory SeriesHistory[]

  @@unique([number, season, showId])
  @@map("episode")
}

model Server {
  serverId  Int      @id @default(autoincrement()) @map("server_id")
  name      String   @unique @db.VarChar(100)
  url       String   @unique @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  MovieServer  MovieServer[]
  SeriesServer SeriesServer[]

  @@map("server")
}

model Actor {
  actorId   Int      @id @default(autoincrement()) @map("actor_id")
  name      String   @db.VarChar(100)
  image     String?  @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  MovieCast ShowCast[]

  @@unique([name, image])
  @@map("actor")
}

model Director {
  directorId Int      @id @default(autoincrement()) @map("director_id")
  name       String   @db.VarChar(100)
  image      String?  @db.VarChar(480)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt

  ShowDirector ShowDirector[]

  @@unique([name, image])
  @@map("director")
}

model Genre {
  genreId   Int      @id @default(autoincrement()) @map("genre_id")
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  GenreRating GenreRating[]
  ShowGenre   ShowGenre[]

  @@map("genre")
}

model Language {
  languageId Int      @id @default(autoincrement()) @map("language_id")
  name       String   @unique @db.VarChar(100)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  ShowLanguage ShowLanguage[]

  @@map("language")
}

model Studio {
  studioId  Int      @id @default(autoincrement()) @map("studio_id")
  name      String   @unique @db.VarChar(100)
  image     String?  @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ShowStudio ShowStudio[]

  @@map("studio")
}

model Writer {
  writerId  Int      @id @default(autoincrement()) @map("writer_id")
  name      String   @db.VarChar(100)
  image     String   @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ShowWriter ShowWriter[]

  @@unique([name, image])
  @@map("writer")
}

model Poster {
  posterId  Int      @id @default(autoincrement()) @map("poster_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  url       String   @unique @db.VarChar(480)
  default   Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("poster")
}

model Cover {
  coverId   Int      @id @default(autoincrement()) @map("cover_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  url       String   @unique @db.VarChar(480)
  default   Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cover")
}

model Trailer {
  trailerId Int      @id @default(autoincrement()) @map("tailer_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  url       String   @unique @db.VarChar(480)
  default   Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("trailer")
}

model User {
  userId           Int      @id @default(autoincrement()) @map("user_id")
  email            String   @unique @db.VarChar(480)
  password         String   @db.VarChar(400)
  userName         String
  // name             String?  @db.VarChar(100)
  // age              Int?
  // image            String?  @default("default.png") @db.VarChar(480)
  verified         Boolean  @default(false)
  verificationCode String?  @map("verification_code") @db.VarChar(100)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  GenreRating   GenreRating[]
  MovieHistory  MovieHistory[]
  SeriesHistory SeriesHistory[]
  ShowRating    ShowRating[]

  @@map("users")
}

//----------------------------------------------------- Many To Many Tables ----------------------------------------------------//
model MovieServer {
  movie     Movie    @relation(fields: [movieId], references: [movieId], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int      @map("movie_id")
  server    Server   @relation(fields: [serverId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  serverId  Int      @map("server_id")
  url       String   @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([movieId, serverId])
  @@map("movie_server")
}

model SeriesServer {
  episode   Episode  @relation(fields: [episodeId], references: [episodeId], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int      @map("episode_id")
  server    Server   @relation(fields: [serverId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  serverId  Int      @map("server_id")
  url       String   @db.VarChar(480)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([serverId, episodeId])
  @@map("series_server")
}

model ShowCast {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  actor     Actor    @relation(fields: [actorId], references: [actorId], onDelete: Cascade, onUpdate: Cascade)
  actorId   Int      @map("actor_id")
  role      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, actorId])
  @@map("show_cast")
}

model ShowDirector {
  show       Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId     Int      @map("show_id")
  director   Director @relation(fields: [directorId], references: [directorId], onDelete: Cascade, onUpdate: Cascade)
  directorId Int      @map("director_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([showId, directorId])
  @@map("show_director")
}

model ShowGenre {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  genre     Genre    @relation(fields: [genreId], references: [genreId], onDelete: Cascade, onUpdate: Cascade)
  genreId   Int      @map("genre_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, genreId])
  @@map("show_genre")
}

model ShowLanguage {
  show       Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId     Int      @map("show_id")
  language   Language @relation(fields: [languageId], references: [languageId], onDelete: Cascade, onUpdate: Cascade)
  languageId Int      @map("language_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([showId, languageId])
  @@map("show_language")
}

model ShowStudio {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  studio    Studio   @relation(fields: [studioId], references: [studioId], onDelete: Cascade, onUpdate: Cascade)
  studioId  Int      @map("studio_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, studioId])
  @@map("show_studio")
}

model ShowWriter {
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  writer    Writer   @relation(fields: [writerId], references: [writerId], onDelete: Cascade, onUpdate: Cascade)
  writerId  Int      @map("writer_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([showId, writerId])
  @@map("show_writer")
}

model GenreRating {
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @map("user_id")
  genre     Genre    @relation(fields: [genreId], references: [genreId], onDelete: Cascade, onUpdate: Cascade)
  genreId   Int      @map("genre_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([genreId, userId])
  @@map("genre_rating")
}

model MovieHistory {
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @map("user_id")
  movie     Movie    @relation(fields: [movieId], references: [movieId], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int      @map("movie_id")
  watchTime Int      @default(0) @map("watch_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([movieId, userId])
  @@map("movie_history")
}

model SeriesHistory {
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @map("user_id")
  episoded  Episode  @relation(fields: [episodeId], references: [episodeId], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int      @map("episode_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([episodeId, userId])
  @@map("series_history")
}

model ShowRating {
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @map("user_id")
  show      Show     @relation(fields: [showId], references: [showId], onDelete: Cascade, onUpdate: Cascade)
  showId    Int      @map("show_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, showId])
  @@map("show_rating")
}
