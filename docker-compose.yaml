############################################### Setup #######################################################
version: '3.8'

volumes:
  RedisDB: {}
  Nginx: {}
  ElasticData: {}
  ElasticConfig: {}
  Kibana: {}
  RabbitmqLog: {}
  RabbitmqLib: {}
  database-data: {}

networks:
  dio:
    driver: bridge

services:
  ################################################ Hercules #######################################################
  hercules:
    build:
      context: ./dio
      dockerfile: ./apps/hercules/Dockerfile
      target: development
    command:
      [
        'sh',
        '-c',
        'pnpm prisma generate --schema="./apps/hercules/prisma/schema.prisma" && pnpm prisma migrate dev --schema="./apps/hercules/prisma/schema.prisma" && pnpm start hercules',
      ]
    env_file: ./backend/apps/hercules/.env
    container_name: hercules
    volumes:
      - ./dio:/usr/share/app
      - /usr/share/app/node_modules
    ports:
      - '4000:4000'
      - '5555:5555'
    networks:
      - dio
    restart: unless-stopped
    labels:
      org.label-schema.group: 'Backend'
    depends_on:
      - rabbitmq

  hercules-db:
    image: postgres:14-alpine
    container_name: hercules-db
    ports:
      - 5433:5432
    networks:
      - dio
    environment:
      POSTGRES_USER: ares
      POSTGRES_PASSWORD: 7142
      POSTGRES_DB: hercules

  redis:
    image: redis:alpine
    container_name: redis
    expose:
      - 6379
    volumes:
      - RedisDB:/data
    networks:
      dio:
    labels:
      org.label-schema.group: 'Api'

  ################################################ Apollo #######################################################
  apollo:
    build:
      context: ./backend
      dockerfile: ./apps/apollo/Dockerfile
      target: development
    command:
      [
        'sh',
        '-c',
        'pnpm prisma generate --schema="./apps/apollo/prisma/schema.prisma" && pnpm prisma migrate dev --schema="./apps/apollo/prisma/schema.prisma" && pnpm run start apollo',
      ]
    env_file: ./backend/apps/apollo/.env
    container_name: apollo
    ports:
      - '4001:4001'
    networks:
      - dio
    restart: unless-stopped
    labels:
      org.label-schema.group: 'Apollo'
    volumes:
      - ./backend/apps/apollo:/usr/share/app/apps/apollo
      - /usr/share/app/node_modules
    depends_on:
      - apollo-db

  apollo-db:
    image: postgres:14-alpine
    container_name: apollo-db
    ports:
      - 5434:5432
    networks:
      - dio
    environment:
      POSTGRES_USER: ares
      POSTGRES_PASSWORD: 7142
      POSTGRES_DB: apollo

  ################################################ Coeus #######################################################
  coeus:
    build:
      context: ./backend
      dockerfile: ./apps/coeus/Dockerfile
      target: development
    command: ['sh', '-c', 'pnpm run start:dev coeus']
    env_file: ./backend/apps/hesita/.env
    container_name: coeus
    ports:
      - '4002:4002'
    networks:
      - dio
    restart: unless-stopped
    labels:
      org.label-schema.group: 'Coeus'
    volumes:
      - ./backend/apps/coeus:/usr/share/app/apps/coeus
      - /usr/share/app/node_modules

  ############################################## Athena ########################################################
  athena:
    build:
      context: ./backend/athena
      dockerfile: Dockerfile
    container_name: athena
    expose:
      - 4003
    networks:
      dio:
    restart: unless-stopped
    labels:
      org.label-schema.group: 'Athena'

  ############################################## Hesita ########################################################
  hesita:
    build:
      context: ./backend
      dockerfile: ./apps/hesita/Dockerfile
      target: development
    command: ['sh', '-c', 'pnpm run start:dev hesita']
    env_file: ./backend/apps/hesita/.env
    container_name: hesita
    ports:
      - '4004:4004'
    networks:
      - dio
    restart: unless-stopped
    labels:
      org.label-schema.group: 'Hesita'
    volumes:
      - ./backend/apps/hesita:/usr/share/app/apps/hesita
      - /usr/share/app/node_modules

  ############################################## Elastic ########################################################
  zues:
    build:
      context: ./server/elk/elasticsearch
      dockerfile: Dockerfile
      args:
        ELK_VERSION: ${ELK_VERSION}
    container_name: zues
    restart: unless-stopped
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
      ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME}
      ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
      ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
      ES_JAVA_OPTS: '-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true -Dlog4j2.formatMsgNoLookups=true'
      bootstrap.memory_lock: 'true'
    volumes:
      - ElasticData:/usr/share/elasticsearch/data
      - ElasticConfig:/usr/share/elasticsearch/config
    ports:
      - '9200:9200'
      - '9300:9300'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 51200
        hard: 51200
    networks:
      - dio
    # healthcheck:
    #   test:
    #     [
    #       'CMD',
    #       'sh',
    #       '-c',
    #       "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'",
    #     ]
    #
  kibana:
    build:
      context: ./server/elk/kibana
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kibana
    restart: unless-stopped
    volumes:
      - Kibana:/usr/share/kibana
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
    ports:
      - '5601:5601'
    networks:
      - dio

  ################################################# System ########################################################
  ### v1.23.0-alpine
  nginx:
    build:
      context: ./server/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - '3000:3000'
      - '3100:3100'
      - '4000:4000'
      - '5601:5601'
      - '8081:8081'

    volumes:
      - Nginx:/etc/nginx
    networks:
      - dio
    restart: unless-stopped
    labels:
      org.label-schema.group: 'System'

  rabbitmq:
    image: rabbitmq:3.9.22-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - RabbitmqLib:/var/lib/rabbitmq/
      - RabbitmqLog:/var/log/rabbitmq
    networks:
      - dio
################################################################################################################
